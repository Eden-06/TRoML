// automatically generated by Xtext
grammar org.rosi.troml.TRoML with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.rosi.crom.metamodel/model/crom_l1_composed.ecore" as crom
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as type

//Main model element
Model returns crom::Model:
	{crom::Model}
	(elements+=ModelElement)+
	('relations:'
	(relations+=ModelRelations)*)?;

ModelRelations returns crom::Relation:
	Fulfillment ';'?;

ModelElement returns crom::ModelElement:
	Group | RigidType;

	//Basic terminals
enum Direction returns crom::Direction:
	Undirected='--' | FirstToSecond='-->' | SecondToFirst='<--';

EString returns ecore::EString:
	STRING | ID;

//terminal PINT returns ecore::EInt:
//	('0'..'9')+;

Extends:
	'extends' | ':';

Fills:
	'fills' | 'can play' | '-|>';

	//Definition of basic model element properties
Attribute returns crom::Attribute:
	name=ID ':' type=[crom::RigidType|EString] ';';

Parameter returns crom::Parameter:
	{crom::Parameter}
	name=ID ':' type=[crom::RigidType|EString];

Operation returns crom::Operation:
	name=ID
	'(' (params+=Parameter ("," params+=Parameter)*)? ')' ':' type=[crom::RigidType|EString]
	'{'
	operation=EString
	'}';

	//Definition of basic model elements
RigidType returns crom::RigidType:
	DataType | NaturalType | CompartmentType;

Group returns crom::Group:
	{crom::Group}
	'group' name=EString
	'{'
	(elements+=ModelElement)*
	('relations:'
	(relations+=ModelRelations)*)?
	'}';

DataType returns crom::DataType:
	{crom::DataType}
	(serializable?='serializable')?
	'data' name=EString (Extends tr_extends=[crom::DataType])?
	'{'
	(attributes+=Attribute | operations+=Operation)*
	'}';

NaturalType returns crom::NaturalType:
	{crom::NaturalType}
	'natural' name=EString (Extends tr_extends=[crom::NaturalType])?
	'{'
	(attributes+=Attribute | operations+=Operation)*
	'}';

	//Definition of Compartments
CompartmentType returns crom::CompartmentType:
	{crom::CompartmentType}
	'compartment' name=EString (Extends tr_extends=[crom::CompartmentType])?
	'{'
	('interface:' (attributes+=Attribute | operations+=Operation)*)?
	('rolemodel:' (parts+=Part | relationships+=Relationship)*)?
	('constraints:' (constraints+=(Constraint))*)?
	'}';

Part returns crom::Part:
	('[' lower=INT '..' upper=INT ']' |
	'[' lower=INT '..' '*' ']' |
	//	  '[' lower=PInt ']' | //TODO: find out how this might work
	'[*]')?
	role=AbstractRole;

AbstractRole returns crom::AbstractRole:
	RoleType | RoleGroup;

RoleType returns crom::RoleType:
	{crom::RoleType}
	'role' name=EString  (Extends tr_extends=[crom::RoleType])?
	'{'
	(attributes+=Attribute | operations+=Operation)*
	'}';

RoleGroup returns crom::RoleGroup:
	'rolegroup' name=EString 
	(	('#'| 'selecting') lower=INT ('..'|'upto') upper=INT |
		('#'| 'selecting') lower=INT ('..'|'upto') '*' |
		('#'| 'selecting') '*')?
	'{'
	(elements+=RoleGroupElement (elements+=RoleGroupElement)*)?
	'}';

RoleGroupElement returns crom::RoleGroupElement:
	RoleType | RoleGroup | AbstractRoleReference
;

AbstractRoleReference returns crom::AbstractRoleRef:
	ref=[crom::AbstractRole|EString] (';')?
;

Relationship returns crom::Relationship:
	name=ID '(' first=Place direction=Direction second=Place ')'
	(':' tr_constraints+=IntraRelationshipConstraint (',' tr_constraints+=IntraRelationshipConstraint)*)?;

Place returns crom::Place:
	holder=[crom::RoleType|EString]
	('[' lower=INT '..' upper=INT ']' |
	'[' lower=INT '..' '*' ']' |
	'[*]')?;

	//Definition of Constraints
Constraint returns crom::Constraint:
	(RoleConstraint | RelationshipConstraints | ComplexConstraint) ';'?;

RoleConstraint returns crom::RoleConstraint:
	RoleImplication | RoleEquivalence | RoleProhibition;

RoleImplication returns crom::RoleImplication:
	(first=[crom::RoleType] ('implies' |'->' | '>') second=[crom::RoleType] |
	second=[crom::RoleType] ('<-' | '<') first=[crom::RoleType]) ';';

RoleEquivalence returns crom::RoleEquivalence:
	first=[crom::RoleType] ('equals' | '<->' | '<>') second=[crom::RoleType] ';';

RoleProhibition returns crom::RoleProhibition:
	first=[crom::RoleType] ('prohibits' | '><' | '>-<') second=[crom::RoleType] ';';

RelationshipConstraints returns crom::RelationshipConstraint:
	IntraRelationshipConstraint | InterRelationshipConstraint;
	
//TODO: allow the definition of multiple constraints for one relationship
//IntraRelationshipConstraint returns crom::IntraRelationshipConstraint:
//	({crom::Total} relation=[crom::Relationship|EString] (':' | 'is') 'total' |
//	{crom::Cyclic} relation=[crom::Relationship|EString] (':' | 'is') 'cyclic' |
//	{crom::Irreflexive} relation=[crom::Relationship|EString] (':' | 'is') 'irreflexive' |
//	{crom::ParthoodConstraint} relation=[crom::Relationship|EString] (':' | 'is') kind=Parthood);

IntraRelationshipConstraint returns crom::IntraRelationshipConstraint:
	({crom::Total} 'total'  |
	{crom::Cyclic} 'cyclic' |
	{crom::Irreflexive} 'irreflexive' |
	{crom::ParthoodConstraint} kind=Parthood);

InterRelationshipConstraint returns crom::InterRelationshipConstraint:
	{crom::RelationshipImplication}
	(first=[crom::Relationship|EString] ('subset of'|'==>') second=[crom::Relationship|EString] |
	second=[crom::Relationship|EString] ('superset of'|'<==') first=[crom::Relationship|EString]);

enum Parthood returns crom::Parthood:
	ExclusivePart='exclusivepart' | SharablePart='sharablepart' | EssentialPart='essentialpart' |
	MandatoryPart='mandatorypart' | InseparablePart='inseparablepart';

	//Definition of Fulfillment 
Fulfillment returns crom::Fulfillment:
	filler=[crom::RigidType] Fills filled=[crom::AbstractRole];

	//continue the definition
ComplexConstraint returns crom::ComplexConstraint:
	'invariant' 'using' targets+=[crom::AbstractRole] ("," targets+=[crom::AbstractRole])*
	'ensure' expression=EString;


